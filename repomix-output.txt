This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-13T14:40:21.218Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
.mvn/wrapper/maven-wrapper.properties
mvnw
mvnw.cmd
pom.xml
src/main/java/com/spring/bookstore/BookStoreWebApplication.java
src/main/java/com/spring/bookstore/bootstrap/AdminSeeder.java
src/main/java/com/spring/bookstore/bootstrap/RoleSeeder.java
src/main/java/com/spring/bookstore/config/CloudinaryConfig.java
src/main/java/com/spring/bookstore/config/DotEnvConfig.java
src/main/java/com/spring/bookstore/config/MailConfig.java
src/main/java/com/spring/bookstore/config/ModelMapperConfig.java
src/main/java/com/spring/bookstore/config/RedisConfig.java
src/main/java/com/spring/bookstore/config/SecurityConfig.java
src/main/java/com/spring/bookstore/controller/AuthController.java
src/main/java/com/spring/bookstore/controller/AuthorController.java
src/main/java/com/spring/bookstore/controller/BookController.java
src/main/java/com/spring/bookstore/controller/CartController.java
src/main/java/com/spring/bookstore/controller/CategoryController.java
src/main/java/com/spring/bookstore/controller/CustomerController.java
src/main/java/com/spring/bookstore/controller/OrderController.java
src/main/java/com/spring/bookstore/controller/ReviewController.java
src/main/java/com/spring/bookstore/dto/BookDataDto.java
src/main/java/com/spring/bookstore/dto/BookDto.java
src/main/java/com/spring/bookstore/dto/CustomerProfileDto.java
src/main/java/com/spring/bookstore/dto/LoginResponseDto.java
src/main/java/com/spring/bookstore/dto/LoginUserDto.java
src/main/java/com/spring/bookstore/dto/OrderRequestDto.java
src/main/java/com/spring/bookstore/dto/ResetPasswordDto.java
src/main/java/com/spring/bookstore/dto/response/MessageResponse.java
src/main/java/com/spring/bookstore/dto/ReviewDto.java
src/main/java/com/spring/bookstore/dto/ReviewRequestDto.java
src/main/java/com/spring/bookstore/entity/Author.java
src/main/java/com/spring/bookstore/entity/Book.java
src/main/java/com/spring/bookstore/entity/Category.java
src/main/java/com/spring/bookstore/entity/Customer.java
src/main/java/com/spring/bookstore/entity/Order.java
src/main/java/com/spring/bookstore/entity/OrderDetail.java
src/main/java/com/spring/bookstore/entity/OrderStatusEnum.java
src/main/java/com/spring/bookstore/entity/PasswordResetToken.java
src/main/java/com/spring/bookstore/entity/Review.java
src/main/java/com/spring/bookstore/entity/Role.java
src/main/java/com/spring/bookstore/entity/RoleEnum.java
src/main/java/com/spring/bookstore/entity/Users.java
src/main/java/com/spring/bookstore/entity/VerificationToken.java
src/main/java/com/spring/bookstore/event/OnRegisterCompleteEvent.java
src/main/java/com/spring/bookstore/event/TheRegisterListener.java
src/main/java/com/spring/bookstore/exception/GlobalExceptionHandler.java
src/main/java/com/spring/bookstore/mapper/BookMapper.java
src/main/java/com/spring/bookstore/repository/AuthorRepository.java
src/main/java/com/spring/bookstore/repository/BookRepository.java
src/main/java/com/spring/bookstore/repository/CategoryRepository.java
src/main/java/com/spring/bookstore/repository/CustomerRepository.java
src/main/java/com/spring/bookstore/repository/OrderDetailRepository.java
src/main/java/com/spring/bookstore/repository/OrderRepository.java
src/main/java/com/spring/bookstore/repository/PasswordResetTokenRepository.java
src/main/java/com/spring/bookstore/repository/ReviewRepository.java
src/main/java/com/spring/bookstore/repository/RoleRepository.java
src/main/java/com/spring/bookstore/repository/UserRepository.java
src/main/java/com/spring/bookstore/repository/VerificationTokenRepository.java
src/main/java/com/spring/bookstore/security/CustomUserDetails.java
src/main/java/com/spring/bookstore/security/CustomUserDetailsService.java
src/main/java/com/spring/bookstore/security/JwtAuthenticationFilter.java
src/main/java/com/spring/bookstore/security/JwtAuthenticationProvider.java
src/main/java/com/spring/bookstore/security/JwtAuthEntrypoint.java
src/main/java/com/spring/bookstore/service/AuthorService.java
src/main/java/com/spring/bookstore/service/AuthService.java
src/main/java/com/spring/bookstore/service/BookService.java
src/main/java/com/spring/bookstore/service/CartService.java
src/main/java/com/spring/bookstore/service/CategoryService.java
src/main/java/com/spring/bookstore/service/CustomerService.java
src/main/java/com/spring/bookstore/service/MailService.java
src/main/java/com/spring/bookstore/service/OrderService.java
src/main/java/com/spring/bookstore/service/ReviewService.java
src/main/java/com/spring/bookstore/service/UserService.java
src/main/java/com/spring/bookstore/utils/CartItem.java
src/main/resources/application.properties
src/test/java/com/spring/bookstore/BookStoreWebApplicationTests.java
src/test/java/com/spring/bookstore/MainTest.java

================================================================
Repository Files
================================================================

================
File: .gitignore
================
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

.env

================
File: .mvn/wrapper/maven-wrapper.properties
================
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.7/apache-maven-3.9.7-bin.zip

================
File: mvnw
================
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"

================
File: mvnw.cmd
================
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    https://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"

================
File: pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.1</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.spring</groupId>
	<artifactId>Book-Store-Web</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Book-Store-Web</name>
	<description>Book Store Web using Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.modelmapper</groupId>
			<artifactId>modelmapper</artifactId>
			<version>3.0.0</version>
		</dependency>

		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.cloudinary</groupId>
			<artifactId>cloudinary-http44</artifactId>
			<version>1.36.0</version>
		</dependency>
		<dependency>
			<groupId>com.cloudinary</groupId>
			<artifactId>cloudinary-taglib</artifactId>
			<version>1.36.0</version>
		</dependency>
		<dependency>
			<groupId>io.github.cdimascio</groupId>
			<artifactId>dotenv-java</artifactId>
			<version>2.2.4</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>0.11.5</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>0.11.5</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>0.11.5</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>

================
File: src/main/java/com/spring/bookstore/BookStoreWebApplication.java
================
package com.spring.bookstore;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BookStoreWebApplication {

	public static void main(String[] args) {
		SpringApplication.run(BookStoreWebApplication.class, args);
	}

}

================
File: src/main/java/com/spring/bookstore/bootstrap/AdminSeeder.java
================
package com.spring.bookstore.bootstrap;

import com.spring.bookstore.entity.Role;
import com.spring.bookstore.entity.RoleEnum;
import com.spring.bookstore.entity.Users;
import com.spring.bookstore.repository.RoleRepository;
import com.spring.bookstore.repository.UserRepository;
import io.github.cdimascio.dotenv.Dotenv;
import jakarta.persistence.EntityNotFoundException;
import lombok.AllArgsConstructor;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.util.Optional;

@Component
@AllArgsConstructor
public class AdminSeeder implements ApplicationListener<ContextRefreshedEvent> {

    private Dotenv dotenv;
    private UserRepository userRepository;
    private RoleRepository roleRepository;
    private PasswordEncoder passwordEncoder;

    @Override
    public void onApplicationEvent(ContextRefreshedEvent event) {
        this.loadAdministrator();
    }

    private void loadAdministrator() {
        Role role = this.roleRepository.findByName(RoleEnum.ADMIN).orElseThrow(
                () -> new EntityNotFoundException("Role not found!")
        );

        String email = this.dotenv.get("admin.email");
        String password = this.dotenv.get("admin.password");
        String fullName = this.dotenv.get("admin.fullName");

        Optional<Users> optionalUsers = this.userRepository.findByEmail(email);
        if(optionalUsers.isPresent()) {
            return;
        }
        Users newAdmin = new Users();
        newAdmin.setEmail(email);
        newAdmin.setPassword(this.passwordEncoder.encode(password));
        newAdmin.setFullName(fullName);
        newAdmin.setEnabled(true);
        newAdmin.setRole(role);

        this.userRepository.save(newAdmin);
    }
}

================
File: src/main/java/com/spring/bookstore/bootstrap/RoleSeeder.java
================
package com.spring.bookstore.bootstrap;

import com.spring.bookstore.entity.Role;
import com.spring.bookstore.entity.RoleEnum;
import com.spring.bookstore.repository.RoleRepository;
import lombok.AllArgsConstructor;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.stereotype.Component;

import java.util.*;

@Component
@AllArgsConstructor
public class RoleSeeder implements ApplicationListener<ContextRefreshedEvent> {

    private RoleRepository roleRepository;

    @Override
    public void onApplicationEvent(ContextRefreshedEvent event) {
        this.loadRole();
    }

    private void loadRole() {
        List<RoleEnum> roleEnums = Arrays.asList(RoleEnum.ADMIN, RoleEnum.USER);
        Map<RoleEnum, String> mapDescription = Map.of(
                RoleEnum.ADMIN, "Default administrator role",
                RoleEnum.USER, "Default user role"
        );

        roleEnums.forEach(roleEnum -> {
            this.roleRepository.findByName(roleEnum).ifPresentOrElse(System.out::println,
                    () -> {
                        Role role = new Role();
                        role.setName(roleEnum);
                        role.setDescription(mapDescription.get(roleEnum));

                        this.roleRepository.save(role);
                    });
        });
    }
}

================
File: src/main/java/com/spring/bookstore/config/CloudinaryConfig.java
================
package com.spring.bookstore.config;

import com.cloudinary.Cloudinary;
import io.github.cdimascio.dotenv.Dotenv;
import lombok.AllArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@AllArgsConstructor
public class CloudinaryConfig {

    private Dotenv dotenv;

    @Bean
    public Cloudinary cloudinary() {
        Cloudinary cloudinary = new Cloudinary(this.dotenv.get("CLOUDINARY_URL"));
        cloudinary.config.secure = true;
        return cloudinary;
    }
}

================
File: src/main/java/com/spring/bookstore/config/DotEnvConfig.java
================
package com.spring.bookstore.config;

import io.github.cdimascio.dotenv.Dotenv;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class DotEnvConfig {

    @Bean
    public Dotenv dotenv() {
        return Dotenv.load();
    }
}

================
File: src/main/java/com/spring/bookstore/config/MailConfig.java
================
package com.spring.bookstore.config;

import io.github.cdimascio.dotenv.Dotenv;
import lombok.AllArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.JavaMailSenderImpl;

import java.util.Properties;

@Configuration
@AllArgsConstructor
public class MailConfig {

    private Dotenv dotenv;

    @Bean
    public JavaMailSender javaMailSender() {
        JavaMailSenderImpl javaMailSender = new JavaMailSenderImpl();
        javaMailSender.setHost("smtp.gmail.com");
        javaMailSender.setPort(587);
        javaMailSender.setUsername(this.dotenv.get("spring.mail.username"));
        javaMailSender.setPassword(this.dotenv.get("spring.mail.password"));

        Properties properties = javaMailSender.getJavaMailProperties();
        properties.put("mail.transport.protocol", "smtp");
        properties.put("mail.smtp.auth", "true");
        properties.put("mail.smtp.starttls.enable", "true");
        properties.put("mail.debug", "true");

        return javaMailSender;
    }
}

================
File: src/main/java/com/spring/bookstore/config/ModelMapperConfig.java
================
package com.spring.bookstore.config;

import org.modelmapper.ModelMapper;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ModelMapperConfig {

    @Bean
    public ModelMapper modelMapper() {
        return new ModelMapper();
    }
}

================
File: src/main/java/com/spring/bookstore/config/RedisConfig.java
================
package com.spring.bookstore.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;

@Configuration
public class RedisConfig {

    @Bean
    public LettuceConnectionFactory lettuceConnectionFactory() {
        return new LettuceConnectionFactory();
    }

    @Bean
    public RedisTemplate<String, Object> redisTemplate() {
        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();
        redisTemplate.setConnectionFactory(lettuceConnectionFactory());
        redisTemplate.setKeySerializer(new StringRedisSerializer());
        redisTemplate.setValueSerializer(new GenericJackson2JsonRedisSerializer());
        return redisTemplate;
    }
}

================
File: src/main/java/com/spring/bookstore/config/SecurityConfig.java
================
package com.spring.bookstore.config;

import com.spring.bookstore.security.JwtAuthEntrypoint;
import com.spring.bookstore.security.JwtAuthenticationFilter;
import lombok.AllArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.Arrays;

@Configuration
@AllArgsConstructor
@EnableWebSecurity
@EnableMethodSecurity
public class SecurityConfig {

    private JwtAuthEntrypoint jwtAuthEntrypoint;
    private UserDetailsService userDetailsService;
    private JwtAuthenticationFilter jwtAuthenticationFilter;

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.cors(Customizer.withDefaults())
                .csrf(AbstractHttpConfigurer::disable)
                .authorizeHttpRequests(
                        (authorize) -> {
                            authorize.requestMatchers("auth/**").permitAll()
                                    .requestMatchers(HttpMethod.POST, "api/customer").permitAll()
                                    .requestMatchers(HttpMethod.GET, "api/book/**").permitAll()
                                    .requestMatchers(HttpMethod.GET, "api/category/**").permitAll()
                                    .requestMatchers(HttpMethod.GET, "api/author/**").permitAll()
                                    .requestMatchers("api/cart/**").hasRole("USER")
                                    .requestMatchers("api/review/*").permitAll()
                                    .anyRequest()
                                    .authenticated();
                        }
                )
                .authenticationProvider(this.authenticationProvider())
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .exceptionHandling(exceptionHandling -> exceptionHandling.authenticationEntryPoint(this.jwtAuthEntrypoint))
                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
        return http.build();
    }

    @Bean
    public UrlBasedCorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(Arrays.asList("*"));
        configuration.setAllowedMethods(Arrays.asList("*"));
        configuration.setAllowedHeaders(Arrays.asList("*"));

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
        return configuration.getAuthenticationManager();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();
        daoAuthenticationProvider.setPasswordEncoder(passwordEncoder());
        daoAuthenticationProvider.setUserDetailsService(userDetailsService);

        return daoAuthenticationProvider;
    }
}

================
File: src/main/java/com/spring/bookstore/controller/AuthController.java
================
package com.spring.bookstore.controller;

import com.spring.bookstore.dto.CustomerProfileDto;
import com.spring.bookstore.dto.LoginResponseDto;
import com.spring.bookstore.dto.LoginUserDto;
import com.spring.bookstore.dto.ResetPasswordDto;
import com.spring.bookstore.entity.Users;
import com.spring.bookstore.entity.VerificationToken;
import com.spring.bookstore.repository.UserRepository;
import com.spring.bookstore.security.JwtAuthenticationProvider;
import com.spring.bookstore.service.AuthService;
import com.spring.bookstore.service.UserService;
import jakarta.persistence.EntityNotFoundException;
import lombok.AllArgsConstructor;
import org.modelmapper.ModelMapper;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;

@RestController
@RequestMapping("auth")
@AllArgsConstructor
public class AuthController {

    private JwtAuthenticationProvider authenticationProvider;
    private AuthService authService;
    private UserDetailsService userDetailsService;
    private UserService userService;
    private UserRepository userRepository;
    private ModelMapper modelMapper;

    @PostMapping("login")
    public ResponseEntity<?> login(@RequestBody LoginUserDto loginUserDto) {
        try {
            System.out.println(loginUserDto);
            Users users = this.authService.authenticate(loginUserDto);
            UserDetails userDetails = this.userDetailsService.loadUserByUsername(users.getEmail());
            String token = this.authenticationProvider.generateToken(userDetails);
            return ResponseEntity.ok(new LoginResponseDto(token, this.authenticationProvider.getJwtExpiration()));
        } catch (BadCredentialsException e) {
            e.printStackTrace();
            return new ResponseEntity<>(new BadCredentialsException("Email or password is incorrect!"), HttpStatus.UNAUTHORIZED);
        }
    }

    @GetMapping("registrationConfirmation")
    public ResponseEntity<?> registrationConfirmation(@RequestParam("token") String token) {
        VerificationToken verificationToken = this.userService.getVerificationTokenByToken(token);
        if(verificationToken == null) {
            return new ResponseEntity<>("Invalid Token", HttpStatus.BAD_REQUEST);
        }
        if(verificationToken.getExpiryDate().isBefore(LocalDateTime.now())) {
            return new ResponseEntity<>("Token expired", HttpStatus.BAD_REQUEST);
        }
        Users users = verificationToken.getUsers();
        users.setEnabled(true);
        return ResponseEntity.ok(this.modelMapper.map(this.userRepository.save(users), CustomerProfileDto.class));
    }

    @GetMapping("reset-password")
    public ResponseEntity<?> resetPassword(@RequestParam("email") String email) {
        this.userService.resetPassword(email);
        return ResponseEntity.ok("Please check the email to reset your password!");
    }

    @GetMapping("change-password")
    public ResponseEntity<?> changePassword(@RequestParam("token") String token) {
        String result = this.userService.validatePasswordResetToken(token);
        return ResponseEntity.ok(result);
    }

    @PostMapping("save-password")
    public ResponseEntity<?> savePassword(@RequestBody ResetPasswordDto resetPasswordDto) {
        try {
            return ResponseEntity.ok(this.userService.savePassword(resetPasswordDto));
        } catch (EntityNotFoundException e) {
            e.printStackTrace();
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }
}

================
File: src/main/java/com/spring/bookstore/controller/AuthorController.java
================
package com.spring.bookstore.controller;

import com.spring.bookstore.entity.Author;
import com.spring.bookstore.service.AuthorService;
import lombok.AllArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("/api/author")
@AllArgsConstructor
public class AuthorController {
    private AuthorService authorService;

    @GetMapping
    public ResponseEntity<List<Author>> findAll() {
        return ResponseEntity.ok(this.authorService.findAll());
    }
}

================
File: src/main/java/com/spring/bookstore/controller/BookController.java
================
package com.spring.bookstore.controller;

import com.spring.bookstore.dto.BookDataDto;
import com.spring.bookstore.dto.BookDto;
import com.spring.bookstore.entity.Book;
import com.spring.bookstore.service.BookService;
import jakarta.persistence.EntityNotFoundException;
import lombok.AllArgsConstructor;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.List;

@RestController
@RequestMapping("api/book")
@AllArgsConstructor
public class BookController {

    private BookService bookService;

    @GetMapping("{id}")
    public ResponseEntity<?> getBookById(@PathVariable("id") int bookId) {
        try {
            Book book =this.bookService.getBookById(bookId);
            System.out.println(book);
            return new ResponseEntity<>(book, HttpStatus.OK);
        } catch (EntityNotFoundException e) {
            e.printStackTrace();
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping
    public ResponseEntity<List<BookDataDto>> getAllBooksOnly() {
        return ResponseEntity.ok(this.bookService.getAllBooksOnly());
    }

    @GetMapping("paged")
    public ResponseEntity<Page<BookDataDto>> getBooksByPagingAndSorting(
            @RequestParam("page") int page,
            @RequestParam(defaultValue = "12") int size,
            @RequestParam(defaultValue = "") String sortBy,
            @RequestParam(defaultValue = "") String direction,
            @RequestParam(defaultValue = "") String title

    ) {
        return title.isEmpty() ? ResponseEntity.ok(this.bookService.getBooksByPagingAndSorting(page, size, sortBy, direction)) :  ResponseEntity.ok(this.bookService.searchBooksByTitlePagingAndSorting(page, size, sortBy, direction, title));
    }

    @PreAuthorize("hasRole('ADMIN')")
    @PostMapping
    public ResponseEntity<?> createBook(@ModelAttribute BookDto bookDto) throws IOException{
        try {
            Book createdBook = this.bookService.createBook(bookDto);
            return new ResponseEntity<>(createdBook, HttpStatus.CREATED);
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @PreAuthorize("hasRole('ADMIN')")
    @PutMapping("{id}")
    public ResponseEntity<?> updateBook(@PathVariable("id") int bookId,
                                        @ModelAttribute BookDto bookDto) throws IOException{
        try {
            Book updatedBook = this.bookService.updateBook(bookId, bookDto);
            return ResponseEntity.ok(updatedBook);
        } catch (DataIntegrityViolationException e) {
            e.printStackTrace();
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @PreAuthorize("hasRole('ADMIN')")
    @DeleteMapping("{id}")
    public ResponseEntity<?> deleteBook(@PathVariable("id") int bookId) {
        try {
            this.bookService.deleteBook(bookId);
            return ResponseEntity.ok("The book with id" + bookId + " has been deleted successfully!");
        } catch (EntityNotFoundException e) {
            e.printStackTrace();
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }


}

================
File: src/main/java/com/spring/bookstore/controller/CartController.java
================
package com.spring.bookstore.controller;

import com.spring.bookstore.service.CartService;
import lombok.AllArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("api/cart")
@AllArgsConstructor
public class CartController {

    private CartService cartService;

    @GetMapping("add/{id}")
    public ResponseEntity<?> addToCart(@PathVariable("id") int bookId) {
        this.cartService.addToCart(bookId);
        return ResponseEntity.ok("Successfully!");
    }

    @GetMapping("clear")
    public ResponseEntity<String> clearCart() {
        this.cartService.removeCart();
        return ResponseEntity.ok("Successfully!");
    }

    @GetMapping("remove/{id}")
    public ResponseEntity<String> removeItem(@PathVariable("id") int bookId) {
        this.cartService.removeItem(bookId);
        return ResponseEntity.ok("Successfully!");
    }

    @GetMapping("minus/{id}")
    public ResponseEntity<String> minusItem(@PathVariable("id") int bookId) {
        this.cartService.minusItem(bookId);
        return ResponseEntity.ok("Successfully!");
    }

    @GetMapping("items")
    public ResponseEntity<Map<Integer, Integer>> getItems() {
        Map<Integer, Integer> items = this.cartService.getItems();
        System.out.println(items);
        return ResponseEntity.ok(items);
    }

    @GetMapping("total-items")
    public ResponseEntity<Integer> getTotalItems() {
        return ResponseEntity.ok(this.cartService.getTotalItems());
    }

    @GetMapping("total-quantities")
    public ResponseEntity<Integer> getTotalQuantities() {
        return ResponseEntity.ok(this.cartService.getTotalQuantities());
    }

    @GetMapping("total-amount")
    public ResponseEntity<Double> getTotalAmount() {
        return ResponseEntity.ok(this.cartService.getTotalAmount());
    }
}

================
File: src/main/java/com/spring/bookstore/controller/CategoryController.java
================
package com.spring.bookstore.controller;

import com.spring.bookstore.entity.Category;
import com.spring.bookstore.service.CategoryService;
import jakarta.persistence.EntityNotFoundException;
import lombok.AllArgsConstructor;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("api/category")
@AllArgsConstructor
public class CategoryController {

    private CategoryService categoryService;

    @GetMapping("{id}")
    public ResponseEntity<?> getCategoryById(@PathVariable("id") int categoryId) {
        try {
            Category category = this.categoryService.getCategory(categoryId);
            return new ResponseEntity<>(category, HttpStatus.FOUND);
        } catch (EntityNotFoundException e) {
            e.printStackTrace();
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
        }
    }

    @GetMapping
    public ResponseEntity<List<Category>> getAllCategories() {
        List<Category> categories = this.categoryService.getAllCategories();
        return ResponseEntity.ok(categories);
    }

    @PreAuthorize("hasRole('ADMIN')")
    @PostMapping
    public ResponseEntity<?> createCategory(@RequestBody Category category) {
        try {
            Category savedCategory = this.categoryService.createCategory(category);
            return new ResponseEntity<>(savedCategory, HttpStatus.CREATED);
        } catch (IllegalArgumentException exception) {
            exception.printStackTrace();
            return new ResponseEntity<>(exception.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @PreAuthorize("hasRole('ADMIN')")
    @PutMapping("{id}")
    public ResponseEntity<?> updateCategory(@PathVariable("id") int categoryId,
                                            @RequestBody Category category) {
        try {
            Category updatedCategory = this.categoryService.updateCategory(categoryId, category);
            return new ResponseEntity<>(updatedCategory, HttpStatus.OK);
        } catch (DataIntegrityViolationException e) {
            e.printStackTrace();
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @PreAuthorize("hasRole('ADMIN')")
    @DeleteMapping("{id}")
    public ResponseEntity<?> deleteCategory(@PathVariable("id") int categoryId) {
        try {
            this.categoryService.deleteCategory(categoryId);
            return ResponseEntity.ok("The category has been successfully deleted!");
        } catch (EntityNotFoundException e) {
            e.printStackTrace();
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }
}

================
File: src/main/java/com/spring/bookstore/controller/CustomerController.java
================
package com.spring.bookstore.controller;

import com.spring.bookstore.dto.CustomerProfileDto;
import com.spring.bookstore.dto.response.MessageResponse;
import com.spring.bookstore.entity.Customer;
import com.spring.bookstore.entity.Users;
import com.spring.bookstore.event.OnRegisterCompleteEvent;
import com.spring.bookstore.service.CustomerService;
import jakarta.persistence.EntityNotFoundException;
import jakarta.servlet.http.HttpServletRequest;
import lombok.AllArgsConstructor;
import org.modelmapper.ModelMapper;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("api/customer")
@AllArgsConstructor
public class CustomerController {

    private CustomerService customerService;
    private ApplicationEventPublisher applicationEventPublisher;
    private ModelMapper modelMapper;

    @PreAuthorize("isAuthenticated()")
    @GetMapping("{id}")
    public ResponseEntity<?> getCustomer(@PathVariable("id") int customerId) {
        try {
            CustomerProfileDto customer = this.customerService.getCustomerById(customerId);
            return new ResponseEntity<>(customer, HttpStatus.FOUND);
        } catch (EntityNotFoundException e) {
            e.printStackTrace();
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @PreAuthorize("hasRole('ADMIN')")
    @GetMapping
    public ResponseEntity<List<CustomerProfileDto>> getAllCustomers() {
        return ResponseEntity.ok(this.customerService.getAllCustomers());
    }

    @PostMapping
    public ResponseEntity<MessageResponse> registerCustomer(@RequestBody Customer customer, HttpServletRequest request) {
        try {
            CustomerProfileDto savedCustomer = this.customerService.registerCustomer(customer);

            String appURL = request.getContextPath();
            Users users = this.modelMapper.map(savedCustomer, Users.class);
            this.applicationEventPublisher.publishEvent(new OnRegisterCompleteEvent(users, appURL));
            return new ResponseEntity<>(new MessageResponse("You have registered successfully. Please check the email to active account"), HttpStatus.CREATED);
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
            return new ResponseEntity<>(new MessageResponse(e.getMessage()), HttpStatus.BAD_REQUEST);
        }
    }

    @PreAuthorize("hasRole('USER')")
    @PutMapping("change-password/{id}")
    public ResponseEntity<?> changePassword(@PathVariable("id") int userId,
                                            @RequestBody Map<String, String> request) {
        String password = request.get("password");
        try {
            return ResponseEntity.ok(this.customerService.changePassword(userId, password));
        } catch (EntityNotFoundException e) {
            e.printStackTrace();
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }

    @PreAuthorize("isAuthenticated()")
    @PutMapping("{id}")
    public ResponseEntity<?> updateCustomer(@PathVariable("id") int customerId,
                                            @RequestBody CustomerProfileDto customer) {
        try {
            CustomerProfileDto updatedCustomer = this.customerService.updateProfile(customerId, customer);
            return ResponseEntity.ok(updatedCustomer);
        } catch (EntityNotFoundException e) {
            e.printStackTrace();
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @PreAuthorize("hasRole('ADMIN')")
    @DeleteMapping("{id}")
    public ResponseEntity<?> deleteCustomer(@PathVariable("id") int customerId) {
        try {
            this.customerService.deleteCustomer(customerId);
            return ResponseEntity.ok("Customer with id " + customerId + " has been deleted successfully!");
        } catch (EntityNotFoundException e) {
            e.printStackTrace();
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }
}

================
File: src/main/java/com/spring/bookstore/controller/OrderController.java
================
package com.spring.bookstore.controller;

import com.spring.bookstore.dto.OrderRequestDto;
import com.spring.bookstore.entity.Order;
import com.spring.bookstore.entity.OrderStatusEnum;
import com.spring.bookstore.service.OrderService;
import jakarta.persistence.EntityNotFoundException;
import lombok.AllArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("api/order")
@AllArgsConstructor
public class OrderController {

    private OrderService orderService;

    @PreAuthorize("isAuthenticated()")
    @GetMapping("{id}")
    public ResponseEntity<?> getOrderById(@PathVariable("id") int orderId) {
        try {
            return ResponseEntity.ok(this.orderService.getOrderById(orderId));
        } catch (EntityNotFoundException e) {
            e.printStackTrace();
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @PreAuthorize("hasRole('ADMIN')")
    @GetMapping
    public ResponseEntity<List<Order>> getAllOrders() {
        return ResponseEntity.ok(this.orderService.getAllOrders());
    }

    @PreAuthorize("hasRole('USER')")
    @PostMapping
    public ResponseEntity<Order> placeOrder(@RequestBody OrderRequestDto orderRequestDto) {
        return new ResponseEntity<>(this.orderService.placeOrder(orderRequestDto), HttpStatus.CREATED);
    }

    @PreAuthorize("isAuthenticated()")
    @GetMapping("customer")
    public ResponseEntity<List<Order>> getAllOrdersByCustomer() {
        return ResponseEntity.ok(this.orderService.getAllOrderByCustomer());
    }

    @PreAuthorize("hasRole('ADMIN')")
    @DeleteMapping("{id}")
    public ResponseEntity<String> deleteOrder(@PathVariable("id") int orderId) {
        try {
            this.orderService.deleteOrder(orderId);
            return ResponseEntity.ok("The order has been deleted successfully!");
        } catch (EntityNotFoundException e) {
            e.printStackTrace();
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @PreAuthorize("isAuthenticated()")
    @PutMapping("{id}/status")
    public ResponseEntity<?> updateOrderStatus(@PathVariable("id") int orderId,
                                               @RequestParam("status") OrderStatusEnum status) {
        try {
            return ResponseEntity.ok(this.orderService.updateOrderStatus(orderId, status));
        } catch (EntityNotFoundException e) {
            e.printStackTrace();
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }
}

================
File: src/main/java/com/spring/bookstore/controller/ReviewController.java
================
package com.spring.bookstore.controller;

import com.spring.bookstore.dto.ReviewRequestDto;
import com.spring.bookstore.dto.ReviewDto;
import com.spring.bookstore.service.ReviewService;
import jakarta.persistence.EntityNotFoundException;
import lombok.AllArgsConstructor;
import org.modelmapper.ModelMapper;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("api/review")
@AllArgsConstructor
public class ReviewController {

    private ReviewService reviewService;
    private ModelMapper modelMapper;


    @GetMapping("{id}")
    public ResponseEntity<?> getReviewById(@PathVariable("id") int reviewId) {
        try {
            ReviewDto reviewDto = this.modelMapper.map(this.reviewService.getReviewById(reviewId), ReviewDto.class);
            return ResponseEntity.ok(reviewDto);
        } catch (EntityNotFoundException e) {
            e.printStackTrace();
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @PreAuthorize("hasRole('ADMIN')")
    @GetMapping
    public ResponseEntity<List<ReviewDto>> getAllReview() {
        List<ReviewDto> reviewDtoList = this.reviewService.getAllReviews()
                .stream()
                .map(review -> this.modelMapper.map(review, ReviewDto.class))
                .toList();
        return ResponseEntity.ok(reviewDtoList);
    }

    @PreAuthorize("hasRole('USER')")
    @PostMapping
    public ResponseEntity<ReviewDto> addReview(@RequestBody ReviewRequestDto review) {
        ReviewDto reviewDto = this.modelMapper.map(this.reviewService.addReview(review), ReviewDto.class);
        return new ResponseEntity<>(reviewDto, HttpStatus.CREATED);
    }

    @PreAuthorize("hasRole('USER')")
    @PutMapping("{id}")
    public ResponseEntity<?> updateReview(@PathVariable("id") int reviewId,
                                          @RequestBody ReviewRequestDto review) {
        try {
            ReviewDto reviewDto = this.modelMapper.map(this.reviewService.updateReview(reviewId, review), ReviewDto.class);
            return ResponseEntity.ok(reviewDto);
        } catch (EntityNotFoundException e) {
            e.printStackTrace();
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @PreAuthorize("hasRole('USER')")
    @DeleteMapping("{id}")
    public ResponseEntity<String> deleteReview(@PathVariable("id") int reviewId) {
        try {
            this.reviewService.deleteReview(reviewId);
            return ResponseEntity.ok("The review has been deleted successfully!");
        } catch (EntityNotFoundException e) {
            e.printStackTrace();
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }
}

================
File: src/main/java/com/spring/bookstore/dto/BookDataDto.java
================
package com.spring.bookstore.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDate;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class BookDataDto {
    private int bookId;
    private String title;
    private String description;
    private String isbn;
    private String imageURL;
    private double price;
    private LocalDate publishDate;
}

================
File: src/main/java/com/spring/bookstore/dto/BookDto.java
================
package com.spring.bookstore.dto;

import lombok.*;
import org.springframework.web.multipart.MultipartFile;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@ToString
public class BookDto {
    private int bookId;
    private String title;
    private String description;
    private String isbn;
    private MultipartFile multipartFile;
    private float price;
    private String publishDate;
}

================
File: src/main/java/com/spring/bookstore/dto/CustomerProfileDto.java
================
package com.spring.bookstore.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class CustomerProfileDto {
    private int userId;
    private String email;
    private String fullName;
    private boolean enabled;
    private String phone;
    private String address;
}

================
File: src/main/java/com/spring/bookstore/dto/LoginResponseDto.java
================
package com.spring.bookstore.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class LoginResponseDto {
    private String token;
    private long expirationTime;
}

================
File: src/main/java/com/spring/bookstore/dto/LoginUserDto.java
================
package com.spring.bookstore.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class LoginUserDto {
    private String email;
    private String password;
}

================
File: src/main/java/com/spring/bookstore/dto/OrderRequestDto.java
================
package com.spring.bookstore.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class OrderRequestDto {
    private String shippingAddress;
    private String recipientName;
    private String recipientPhone;
    private String paymentMethod;
    private float shippingCost;
}

================
File: src/main/java/com/spring/bookstore/dto/ResetPasswordDto.java
================
package com.spring.bookstore.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ResetPasswordDto {
    private String email;
    private String password;
}

================
File: src/main/java/com/spring/bookstore/dto/response/MessageResponse.java
================
package com.spring.bookstore.dto.response;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class MessageResponse {
    private String message;
}

================
File: src/main/java/com/spring/bookstore/dto/ReviewDto.java
================
package com.spring.bookstore.dto;

import com.spring.bookstore.entity.Book;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ReviewDto {
    private int reviewId;
    private Book book;
    private String customerFullName;
    private String comment;
}

================
File: src/main/java/com/spring/bookstore/dto/ReviewRequestDto.java
================
package com.spring.bookstore.dto;

import com.spring.bookstore.entity.Book;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class ReviewRequestDto {
    private Book book;
    private String comment;
}

================
File: src/main/java/com/spring/bookstore/entity/Author.java
================
package com.spring.bookstore.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.HashSet;
import java.util.Set;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "author")
public class Author {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "author_id")
    private int authorId;

    @Column(nullable = false)
    private String name;

    @JsonIgnore
    @ManyToMany(mappedBy = "authors")
    private Set<Book> books = new HashSet<>();
}

================
File: src/main/java/com/spring/bookstore/entity/Book.java
================
package com.spring.bookstore.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "book")
public class Book {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "book_id")
    private int bookId;

    @Column(nullable = false)
    private String title;

    @Column(nullable = false, length = 16777215)
    private String description;

    @Column(nullable = false, length = 20)
    private String isbn;

    @Column(nullable = false, length = 512)
    private String imageURL;

    @Column(nullable = false, precision = 12)
    private double price;

    @Column(name = "publish_date", nullable = false)
    private LocalDate publishDate;

    @Column(name = "last_updated")
    @UpdateTimestamp
    private LocalDateTime lastUpdated;

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(
            name = "book_category",
            joinColumns = @JoinColumn(name = "book_id"),
            inverseJoinColumns = @JoinColumn(name = "category_id")
    )
    private Set<Category> categories = new HashSet<>();

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(
            name = "book_author",
            joinColumns = @JoinColumn(name = "book_id"),
            inverseJoinColumns = @JoinColumn(name = "author_id")
    )
    private Set<Author> authors = new HashSet<>();

    @OneToMany(mappedBy = "book", cascade = CascadeType.ALL)
    private Set<Review> reviews = new HashSet<>();

    @JsonIgnore
    @OneToMany(mappedBy = "book", cascade = CascadeType.ALL)
    private Set<OrderDetail> orderDetails = new HashSet<>();
}

================
File: src/main/java/com/spring/bookstore/entity/Category.java
================
package com.spring.bookstore.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.HashSet;
import java.util.Set;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@Entity
@Table(name = "category")
public class Category {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "category_id")
    private int categoryId;

    @Column(nullable = false, unique = true, length = 100)
    private String name;

    @JsonIgnore
    @ManyToMany(mappedBy = "categories")
    private Set<Book> books = new HashSet<>();
}

================
File: src/main/java/com/spring/bookstore/entity/Customer.java
================
package com.spring.bookstore.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@ToString
@Table
@Entity(name = "customer")
public class Customer extends Users {

    private String phone;

    private String address;

    @CreationTimestamp
    @Column(name = "register_date")
    private LocalDateTime registerDate;

    @JsonIgnore
    @OneToMany(mappedBy = "customer", cascade = CascadeType.ALL)
    private Set<Review> reviews = new HashSet<>();

    @JsonIgnore
    @OneToMany(mappedBy = "customer", cascade = CascadeType.ALL)
    private Set<Order> orders = new HashSet<>();
}

================
File: src/main/java/com/spring/bookstore/entity/Order.java
================
package com.spring.bookstore.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@Entity
@Table(name = "orders")
public class Order {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "order_id")
    private int orderId;

    @ManyToOne
    @JoinColumn(name = "customer", referencedColumnName = "user_id")
    private Customer customer;

    @CreationTimestamp
    private LocalDateTime orderDate;

    @Column(nullable = false)
    private String shippingAddress;

    @Column(nullable = false, length = 50)
    private String recipientName;

    @Column(nullable = false, length = 10)
    private String recipientPhone;

    @Column(nullable = false, unique = true)
    private String paymentMethod;

    @Column(nullable = false, precision = 12)
    private double shippingCost;

    @Column(nullable = false)
    private int bookCopies;

    @Column(nullable = false, precision = 12)
    private double total;

    @Enumerated(EnumType.STRING)
    private OrderStatusEnum status;

    @OneToMany(mappedBy = "orders", cascade = CascadeType.ALL)
    private Set<OrderDetail> orderDetails = new HashSet<>();
}

================
File: src/main/java/com/spring/bookstore/entity/OrderDetail.java
================
package com.spring.bookstore.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@Entity
@Table(name = "order_detail")
public class OrderDetail {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "order_detail_id")
    private int orderDetailId;

    @ManyToOne
    @JsonIgnore
    @JoinColumn(name = "orders", referencedColumnName = "order_id")
    private Order orders;

    @ManyToOne
    @JoinColumn(name = "book", referencedColumnName = "book_id")
    private Book book;

    @Column(nullable = false)
    private int quantity;

    @Column(nullable = false, precision = 12)
    private double subTotal;

}

================
File: src/main/java/com/spring/bookstore/entity/OrderStatusEnum.java
================
package com.spring.bookstore.entity;

public enum OrderStatusEnum {
    PENDING,
    CONFIRMED,
    PROCESSING,
    SHIPPING,
    DELIVERED,
    CANCELED,
    RETURNED,
    REFUNDED
}

================
File: src/main/java/com/spring/bookstore/entity/PasswordResetToken.java
================
package com.spring.bookstore.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;


@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@Entity
@Table(name = "password_reset_token")
public class PasswordResetToken {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    @Column(nullable = false)
    private String token;

    @ManyToOne
    @JoinColumn(name = "user_id", referencedColumnName = "user_id")
    private Users users;

    @Column(nullable = false)
    private LocalDateTime expiredDate;
}

================
File: src/main/java/com/spring/bookstore/entity/Review.java
================
package com.spring.bookstore.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@Entity
@Table(name = "review")
public class Review {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "review_id")
    private int reviewId;

    @ManyToOne
    @JoinColumn(name = "book", referencedColumnName = "book_id")
    private Book book;

    @ManyToOne
    @JoinColumn(name = "customer", referencedColumnName = "user_id")
    private Customer customer;

    @Column(nullable = false, length = 16777215)
    private String comment;

    @CreationTimestamp
    private LocalDateTime reviewTime;
}

================
File: src/main/java/com/spring/bookstore/entity/Role.java
================
package com.spring.bookstore.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.HashSet;
import java.util.Set;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@Entity
@Table(name = "role")
public class Role {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "role_id")
    private int roleId;

    @Column(nullable = false)
    @Enumerated(EnumType.STRING)
    private RoleEnum name;

    @Column(nullable = false)
    private String description;

    @JsonIgnore
    @OneToMany(mappedBy = "role")
    private Set<Users> users = new HashSet<>();
}

================
File: src/main/java/com/spring/bookstore/entity/RoleEnum.java
================
package com.spring.bookstore.entity;

public enum RoleEnum {
    ADMIN,
    USER
}

================
File: src/main/java/com/spring/bookstore/entity/Users.java
================
package com.spring.bookstore.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.*;

import java.util.HashSet;
import java.util.Set;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@ToString
@Entity
@Table(name = "user")
@Inheritance(strategy = InheritanceType.JOINED)
public class Users {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "user_id")
    protected int userId;

    @Column(nullable = false, unique = true, length = 50)
    protected String email;

    @Column(nullable = false)
    protected String password;

    @Column(nullable = false, length = 50)
    protected String fullName;

    @Column(nullable = false)
    protected boolean enabled = false;

    @ManyToOne
    @JoinColumn(name = "role", referencedColumnName = "role_id")
    protected Role role;

    @JsonIgnore
    @OneToMany(mappedBy = "users", cascade = CascadeType.ALL)
    private Set<PasswordResetToken> tokens = new HashSet<>();
}

================
File: src/main/java/com/spring/bookstore/entity/VerificationToken.java
================
package com.spring.bookstore.entity;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@ToString
@Entity
@Table(name = "verification_token")
public class VerificationToken {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    @Column(nullable = false)
    private String token;

    @OneToOne(targetEntity = Users.class, fetch = FetchType.EAGER)
    @JoinColumn(nullable = false, name = "user_id")
    private Users users;

    @Column(nullable = false)
    private LocalDateTime expiryDate;
}

================
File: src/main/java/com/spring/bookstore/event/OnRegisterCompleteEvent.java
================
package com.spring.bookstore.event;

import com.spring.bookstore.entity.Users;
import lombok.Getter;
import lombok.Setter;
import org.springframework.context.ApplicationEvent;

@Getter
@Setter
public class OnRegisterCompleteEvent extends ApplicationEvent {

    private String appURL;
    private Users users;

    public OnRegisterCompleteEvent(Users users, String appURL) {
        super(users);

        this.users = users;
        this.appURL = appURL;
    }
}

================
File: src/main/java/com/spring/bookstore/event/TheRegisterListener.java
================
package com.spring.bookstore.event;

import com.spring.bookstore.entity.Users;
import com.spring.bookstore.entity.VerificationToken;
import com.spring.bookstore.service.MailService;
import com.spring.bookstore.service.UserService;
import lombok.AllArgsConstructor;
import org.springframework.context.ApplicationListener;
import org.springframework.stereotype.Component;

import java.util.UUID;

@Component
@AllArgsConstructor
public class TheRegisterListener implements ApplicationListener<OnRegisterCompleteEvent> {

    private UserService userService;
    private MailService mailService;

    @Override
    public void onApplicationEvent(OnRegisterCompleteEvent event) {
        this.confirmRegistration(event);
    }

    private void confirmRegistration(OnRegisterCompleteEvent event) {
        Users users = event.getUsers();
        String token = UUID.randomUUID().toString();
        VerificationToken verificationToken = this.userService.saveVerificationToken(users, token);

        String confirmationURL = event.getAppURL() + "/auth/registrationConfirmation?token=" + token;
        String message = "Click here to confirm: " + "\r\n" + "http://localhost:8080" + confirmationURL;
        String to = users.getEmail();
        String subject = "Registration Confirmation";

        this.mailService.sendMail(to, subject, message);
    }
}

================
File: src/main/java/com/spring/bookstore/exception/GlobalExceptionHandler.java
================
package com.spring.bookstore.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(value = { Exception.class})
    public ResponseEntity<Object> handleException(Exception ex) {
        return new ResponseEntity<>(ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
    }
}

================
File: src/main/java/com/spring/bookstore/mapper/BookMapper.java
================
package com.spring.bookstore.mapper;

import com.spring.bookstore.dto.BookDto;
import com.spring.bookstore.entity.Book;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Component;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

@Component
@AllArgsConstructor
public class BookMapper {

    public Book convertToBook(BookDto bookDto, String imageURL) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        Book book = new Book();
        book.setTitle(bookDto.getTitle());
        book.setDescription(bookDto.getDescription());
        book.setIsbn(bookDto.getIsbn());
        book.setImageURL(imageURL);
        book.setPrice(bookDto.getPrice());
        book.setPublishDate(LocalDate.parse(bookDto.getPublishDate(), formatter));
        return book;
    }
}

================
File: src/main/java/com/spring/bookstore/repository/AuthorRepository.java
================
package com.spring.bookstore.repository;

import com.spring.bookstore.entity.Author;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AuthorRepository extends JpaRepository<Author, Integer> {
}

================
File: src/main/java/com/spring/bookstore/repository/BookRepository.java
================
package com.spring.bookstore.repository;

import com.spring.bookstore.entity.Book;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.util.List;
import java.util.Optional;

public interface BookRepository extends JpaRepository<Book, Integer> {

    @Query("select b from Book b")
    List<Book> findAllBooksOnly();

    Page<Book> findByTitleContainingIgnoreCase(String title, Pageable pageable);

    Page<Book> findByAuthorsName(String name, Pageable pageable);

    Page<Book> findByCategoriesName(String name, Pageable pageable);

    Page<Book> findByTitleContainingIgnoreCaseAndAuthorsName(String title, String name, Pageable pageable);

    Page<Book> findByTitleContainingIgnoreCaseAndCategoriesName(String title, String name, Pageable pageable);

    Page<Book> findByAuthorsNameAndCategoriesName(String authorName, String categoryName, Pageable pageable);

    Page<Book> findByTitleContainingIgnoreCaseAndAuthorsNameAndCategoriesName(String title, String categoryName, String authorName, Pageable pageable);

    boolean existsByTitle(String title);

    Optional<Book> findByTitle(String title);

}

================
File: src/main/java/com/spring/bookstore/repository/CategoryRepository.java
================
package com.spring.bookstore.repository;

import com.spring.bookstore.entity.Category;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface CategoryRepository extends JpaRepository<Category, Integer> {

    boolean existsByName(String name);

    Optional<Category> findByName(String name);
}

================
File: src/main/java/com/spring/bookstore/repository/CustomerRepository.java
================
package com.spring.bookstore.repository;

import com.spring.bookstore.entity.Customer;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface CustomerRepository extends JpaRepository<Customer, Integer> {
    Optional<Customer> findByEmail(String email);

    boolean existsByEmail(String email);
}

================
File: src/main/java/com/spring/bookstore/repository/OrderDetailRepository.java
================
package com.spring.bookstore.repository;

import com.spring.bookstore.entity.OrderDetail;
import org.springframework.data.jpa.repository.JpaRepository;

public interface OrderDetailRepository extends JpaRepository<OrderDetail, Integer> {
}

================
File: src/main/java/com/spring/bookstore/repository/OrderRepository.java
================
package com.spring.bookstore.repository;

import com.spring.bookstore.entity.Customer;
import com.spring.bookstore.entity.Order;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface OrderRepository extends JpaRepository<Order, Integer> {

    List<Order> findAllByCustomer(Customer customer);
}

================
File: src/main/java/com/spring/bookstore/repository/PasswordResetTokenRepository.java
================
package com.spring.bookstore.repository;

import com.spring.bookstore.entity.PasswordResetToken;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface PasswordResetTokenRepository extends JpaRepository<PasswordResetToken, Integer> {

    Optional<PasswordResetToken> findByToken(String token);
}

================
File: src/main/java/com/spring/bookstore/repository/ReviewRepository.java
================
package com.spring.bookstore.repository;

import com.spring.bookstore.entity.Review;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ReviewRepository extends JpaRepository<Review, Integer> {
}

================
File: src/main/java/com/spring/bookstore/repository/RoleRepository.java
================
package com.spring.bookstore.repository;

import com.spring.bookstore.entity.Role;
import com.spring.bookstore.entity.RoleEnum;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface RoleRepository extends JpaRepository<Role, Integer> {

    Optional<Role> findByName(RoleEnum name);
}

================
File: src/main/java/com/spring/bookstore/repository/UserRepository.java
================
package com.spring.bookstore.repository;

import com.spring.bookstore.entity.Users;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface UserRepository extends JpaRepository<Users, Integer> {

    Optional<Users> findByEmail(String email);
}

================
File: src/main/java/com/spring/bookstore/repository/VerificationTokenRepository.java
================
package com.spring.bookstore.repository;

import com.spring.bookstore.entity.VerificationToken;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface VerificationTokenRepository extends JpaRepository<VerificationToken, Integer> {

    Optional<VerificationToken> findByToken(String token);
}

================
File: src/main/java/com/spring/bookstore/security/CustomUserDetails.java
================
package com.spring.bookstore.security;

import com.spring.bookstore.entity.Users;
import lombok.AllArgsConstructor;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.stream.Stream;

@AllArgsConstructor
public class CustomUserDetails implements UserDetails {

    private Users users;

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return Stream.of(this.users.getRole())
                .map(role -> new SimpleGrantedAuthority("ROLE_" + role.getName().toString()))
                .toList();
    }

    @Override
    public String getPassword() {
        return this.users.getPassword();
    }

    @Override
    public String getUsername() {
        return users.getEmail();
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return users.isEnabled();
    }
}

================
File: src/main/java/com/spring/bookstore/security/CustomUserDetailsService.java
================
package com.spring.bookstore.security;

import com.spring.bookstore.entity.Users;
import com.spring.bookstore.repository.UserRepository;
import lombok.AllArgsConstructor;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

@Service
@AllArgsConstructor
public class CustomUserDetailsService implements UserDetailsService {

    private UserRepository userRepository;

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        Users users = this.userRepository.findByEmail(email).orElseThrow(
                () -> new UsernameNotFoundException("User with email " + email + " not found")
        );

        return new CustomUserDetails(users);
    }
}

================
File: src/main/java/com/spring/bookstore/security/JwtAuthenticationFilter.java
================
package com.spring.bookstore.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.AllArgsConstructor;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import org.springframework.web.servlet.HandlerExceptionResolver;

import java.io.IOException;

@Component
@AllArgsConstructor
public class JwtAuthenticationFilter extends OncePerRequestFilter {
    private JwtAuthenticationProvider authenticationProvider;
    private UserDetailsService userDetailsService;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        String authorization = request.getHeader("Authorization");
        if(authorization == null || !authorization.startsWith("Bearer ")) {
            filterChain.doFilter(request, response);
            return;
        }
        String jwt = authorization.substring(7);
        String email = this.authenticationProvider.extractUserName(jwt);
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        if(email != null && authentication == null) {
            UserDetails userDetails = this.userDetailsService.loadUserByUsername(email);
            if(this.authenticationProvider.isTokenValid(jwt, userDetails)) {
                UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(
                        userDetails,
                        null,
                        userDetails.getAuthorities()
                );

                authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                SecurityContextHolder.getContext().setAuthentication(authenticationToken);
            }
        }

        filterChain.doFilter(request, response);
    }
}

================
File: src/main/java/com/spring/bookstore/security/JwtAuthenticationProvider.java
================
package com.spring.bookstore.security;

import io.github.cdimascio.dotenv.Dotenv;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import lombok.Getter;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

@Component
@Getter
public class JwtAuthenticationProvider {

    private Dotenv dotenv;
    private String secret_key;
    private final long jwtExpiration = 3600000;

    public Set<String> getRole(UserDetails userDetails) {
        return userDetails.getAuthorities().stream()
                .map(GrantedAuthority::getAuthority)
                .collect(Collectors.toSet());
    }

    public JwtAuthenticationProvider(Dotenv dotenv) {
        this.dotenv = dotenv;
        this.secret_key = this.dotenv.get("secret-key");
    }

    public Key getSigningkey() {
        byte[] keyBytes = Decoders.BASE64.decode(this.secret_key);
        return Keys.hmacShaKeyFor(keyBytes);
    }

    public Claims extractAllClaims(String token) {
        return Jwts
                .parserBuilder()
                .setSigningKey(this.getSigningkey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        Claims claims = this.extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    public String extractUserName(String token) {
        return this.extractClaim(token, Claims::getSubject);
    }

    public Date extractExpiration(String token) {
        return this.extractClaim(token, Claims::getExpiration);
    }

    public String buildToken(Map<String, Object> extractClaims,
                             UserDetails userDetails,
                             long expiration) {
        return Jwts
                .builder()
                .setClaims(extractClaims)
                .setSubject(userDetails.getUsername())
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + expiration))
                .claim("role", getRole(userDetails))
                .signWith(getSigningkey(), SignatureAlgorithm.HS256)
                .compact();
    }

    public String generateToken(Map<String, Object> extractClaims,
                                UserDetails userDetails) {
        return buildToken(extractClaims, userDetails, this.jwtExpiration);
    }

    public String generateToken(UserDetails userDetails) {
        return generateToken(new HashMap<>(), userDetails);
    }

    public boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date(System.currentTimeMillis()));
    }

    public boolean isTokenValid(String token, UserDetails userDetails) {
        String username = extractUserName(token);
        return username.equals(userDetails.getUsername()) && !isTokenExpired(token);
    }

}

================
File: src/main/java/com/spring/bookstore/security/JwtAuthEntrypoint.java
================
package com.spring.bookstore.security;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.stereotype.Component;

import java.io.IOException;

@Component
public class JwtAuthEntrypoint implements AuthenticationEntryPoint {
    @Override
    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {
        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
    }
}

================
File: src/main/java/com/spring/bookstore/service/AuthorService.java
================
package com.spring.bookstore.service;

import com.spring.bookstore.entity.Author;
import com.spring.bookstore.repository.AuthorRepository;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@AllArgsConstructor
public class AuthorService {
    private AuthorRepository authorRepository;

    public List<Author> findAll() {
        return this.authorRepository.findAll();
    }
}

================
File: src/main/java/com/spring/bookstore/service/AuthService.java
================
package com.spring.bookstore.service;

import com.spring.bookstore.dto.LoginUserDto;
import com.spring.bookstore.entity.Users;
import com.spring.bookstore.repository.UserRepository;
import com.spring.bookstore.security.JwtAuthenticationProvider;
import jakarta.persistence.EntityNotFoundException;
import lombok.AllArgsConstructor;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Service;

@Service
@AllArgsConstructor
public class AuthService {

    private UserRepository userRepository;
    private AuthenticationManager authenticationManager;

    public Users authenticate(LoginUserDto loginUserDto) {
        try {
            this.authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(loginUserDto.getEmail(), loginUserDto.getPassword())
            );
        } catch (BadCredentialsException e) {
            e.printStackTrace();
            return null;
        }

        return this.userRepository.findByEmail(loginUserDto.getEmail())
                .orElseThrow(
                        () -> new EntityNotFoundException("User with email " + loginUserDto.getEmail() + " not found!")
                );
    }
}

================
File: src/main/java/com/spring/bookstore/service/BookService.java
================
package com.spring.bookstore.service;

import com.cloudinary.Cloudinary;
import com.cloudinary.utils.ObjectUtils;
import com.spring.bookstore.dto.BookDataDto;
import com.spring.bookstore.dto.BookDto;
import com.spring.bookstore.entity.Book;
import com.spring.bookstore.mapper.BookMapper;
import com.spring.bookstore.repository.BookRepository;
import jakarta.persistence.EntityNotFoundException;
import lombok.AllArgsConstructor;
import org.modelmapper.ModelMapper;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
@AllArgsConstructor
public class BookService {

    private BookRepository bookRepository;
    private Cloudinary cloudinary;
    private BookMapper bookMapper;
    private ModelMapper modelMapper;
    private final Map param = ObjectUtils.asMap(
            "unique_filename", false,
            "overwrite", true
    );


    public String upload(MultipartFile file) throws IOException {
        String fileNameWithExtension = file.getOriginalFilename();
        String fileNameWithoutExtension = fileNameWithExtension.substring(0, fileNameWithExtension.lastIndexOf('.'));

        this.param.put("public_id", fileNameWithoutExtension);
        Map upload = this.cloudinary.uploader().upload(file.getBytes(), this.param);
        return (String) upload.get("url");
    }

    public Book getBookById(int bookId) {
        return this.bookRepository.findById(bookId).orElseThrow(
                () -> new EntityNotFoundException("The book with id " + bookId + " not found!")
        );
    }

    public Page<BookDataDto> getBooksByPagingAndSorting(int page, int size, String sortBy, String direction) {
        Sort sort = Sort.unsorted();
        if(!sortBy.isEmpty() && !direction.isEmpty()) sort = direction.equalsIgnoreCase(Sort.Direction.ASC.name()) ? Sort.by(sortBy).ascending() : Sort.by(sortBy).descending();
        Pageable pageable = PageRequest.of(page, size, sort);
        return this.bookRepository.findAll(pageable)
                .map((book) -> this.modelMapper.map(book, BookDataDto.class));
    }

    public Page<BookDataDto> searchBooksByTitlePagingAndSorting(int page, int size, String sortBy, String direction, String title) {
        Sort sort = Sort.unsorted();
        if(!sortBy.isEmpty() && !direction.isEmpty()) sort = direction.equalsIgnoreCase(Sort.Direction.ASC.name()) ? Sort.by(sortBy).ascending() : Sort.by(sortBy).descending();
        Pageable pageable = PageRequest.of(page, size, sort);
        return this.bookRepository.findByTitleContainingIgnoreCase(title, pageable)
                .map((book) -> this.modelMapper.map(book, BookDataDto.class));
    }

    public List<BookDataDto> getAllBooksOnly() {
        return this.bookRepository.findAllBooksOnly()
                .stream()
                .map(((book) -> this.modelMapper.map(book, BookDataDto.class)))
                .toList();
    }

    public List<Book> getAllBooks() {
        return this.bookRepository.findAll();
    }

    public Book createBook(BookDto bookDto) throws IOException {
        boolean existBook = this.bookRepository.existsByTitle(bookDto.getTitle());
        if(existBook) {
            throw new IllegalArgumentException("The book's title already exists!");
        }
        MultipartFile file = bookDto.getMultipartFile();

        String imageURL = this.upload(file);

        Book book = this.bookMapper.convertToBook(bookDto, imageURL);
        return this.bookRepository.save(book);
    }

    public Book updateBook(int bookId, BookDto bookDto) throws IOException {
        Book bookById = this.bookRepository.findById(bookId).get();
        Book bookByTitle = this.bookRepository.findByTitle(bookDto.getTitle()).orElse(null);

        if(bookByTitle != null && bookById.getBookId() != bookByTitle.getBookId()) {
            throw new DataIntegrityViolationException("The book's title already exists!");
        }

        MultipartFile file = bookDto.getMultipartFile();

        String imageURL = this.upload(file);

        Book updatedBook = this.bookMapper.convertToBook(bookDto, imageURL);
        updatedBook.setBookId(bookId);

        return this.bookRepository.save(updatedBook);
    }

    public void deleteBook(int bookId) {
        this.bookRepository.findById(bookId).orElseThrow(
                () -> new EntityNotFoundException("The book with id " + bookId + " not found")
        );
        this.bookRepository.deleteById(bookId);
    }


}

================
File: src/main/java/com/spring/bookstore/service/CartService.java
================
package com.spring.bookstore.service;

import com.spring.bookstore.entity.Book;
import com.spring.bookstore.repository.BookRepository;
import com.spring.bookstore.utils.CartItem;
import lombok.AllArgsConstructor;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import java.nio.file.AccessDeniedException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

@Service
@AllArgsConstructor
public class CartService {

    private BookRepository bookRepository;
    private UserService userService;
    private RedisTemplate<String, Object> redisTemplate;
    private final String CART_KEY_PREFIX = "cart:";

    private int getUserId() {
        return this.userService.getUserId();
    }

    public void addToCart(int bookId) {
        int userId = this.getUserId();

        String key = this.CART_KEY_PREFIX + "{" + userId + "}";
        CartItem cartItem = (CartItem) this.redisTemplate.opsForValue().get(key);
        if(cartItem == null) {
            cartItem = new CartItem();
        }

        cartItem.addToCart(bookId);
        this.redisTemplate.opsForValue().set(key, cartItem);
    }

    public void removeCart() {
        int userId = this.getUserId();

        String key = this.CART_KEY_PREFIX + "{" + userId + "}";
        CartItem cartItem = (CartItem) this.redisTemplate.opsForValue().get(key);

        if(cartItem == null) return;

        this.redisTemplate.delete(key);
    }

    public void removeItem(int bookId) {
        int userId = this.getUserId();

        String key = this.CART_KEY_PREFIX + "{" + userId + "}";
        CartItem cartItem = (CartItem) this.redisTemplate.opsForValue().get(key);

        if (cartItem == null) return;

        cartItem.removeItem(bookId);
        this.redisTemplate.opsForValue().set(key, cartItem);
    }

    public void minusItem(int bookId) {
        int userId = this.getUserId();

        String key = this.CART_KEY_PREFIX + "{" + userId + "}";
        CartItem cartItem = (CartItem) this.redisTemplate.opsForValue().get(key);

        if (cartItem == null) return;
        cartItem.minusItem(bookId);

        this.redisTemplate.opsForValue().set(key, cartItem);
    }

    public int getTotalItems() {
        int userId = this.getUserId();

        String key = this.CART_KEY_PREFIX + "{" + userId + "}";
        CartItem cartItem = (CartItem) this.redisTemplate.opsForValue().get(key);

        if (cartItem == null) return 0;
        return cartItem.totalItems();
    }

    public int getTotalQuantities() {
        int userId = this.getUserId();

        String key = this.CART_KEY_PREFIX + "{" + userId + "}";
        CartItem cartItem = (CartItem) this.redisTemplate.opsForValue().get(key);

        if (cartItem == null) return 0;
        return cartItem.totalQuantities();
    }

    public double getTotalAmount() {
        int userId = this.getUserId();

        String key = this.CART_KEY_PREFIX + "{" + userId + "}";
        CartItem cartItem = (CartItem) this.redisTemplate.opsForValue().get(key);

        if (cartItem == null) return 0;
        Map<Integer, Integer> items = cartItem.getCart();
        List<Book> books = this.bookRepository.findAllById(items.keySet());
        return books.stream().mapToDouble(book -> items.get(book.getBookId()) * book.getPrice()).sum();
    }

    public Map<Integer, Integer> getItems() {
        int userId = this.getUserId();

        String key = this.CART_KEY_PREFIX + "{" + userId + "}";
        CartItem cartItem = (CartItem) this.redisTemplate.opsForValue().get(key);

        if (cartItem == null) return null;
        return cartItem.getCart();
    }
}

================
File: src/main/java/com/spring/bookstore/service/CategoryService.java
================
package com.spring.bookstore.service;

import com.spring.bookstore.entity.Book;
import com.spring.bookstore.entity.Category;
import com.spring.bookstore.repository.CategoryRepository;
import jakarta.persistence.EntityNotFoundException;
import lombok.AllArgsConstructor;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@AllArgsConstructor
public class CategoryService {

    private CategoryRepository categoryRepository;

    public Category getCategory(int categoryId) {
        return this.categoryRepository.findById(categoryId)
                .orElseThrow(
                        () -> new EntityNotFoundException("The category with id " + categoryId + " not found!")
                );
    }

    public List<Category> getAllCategories() {
        return this.categoryRepository.findAll();
    }

    public Category createCategory(Category category) {
        boolean check = this.categoryRepository.existsByName(category.getName());
        if(check) {
            throw new IllegalArgumentException("The category already exists!");
        }
        return this.categoryRepository.save(category);
    }

    public Category updateCategory(int categoryId, Category category) {
        Category categoryById = this.categoryRepository.findById(categoryId).get();
        Category categoryByName = this.categoryRepository.findByName(category.getName()).orElse(null);

        if(categoryByName != null && categoryById.getCategoryId() != categoryByName.getCategoryId()) {
            throw new DataIntegrityViolationException("The category already exists!");
        }

        category.setCategoryId(categoryId);
        return this.categoryRepository.save(category);
    }

    public void deleteCategory(int categoryId) {
        this.categoryRepository.findById(categoryId).orElseThrow(
                () -> new EntityNotFoundException("The category with id " + categoryId + " not found!")
        );
        this.categoryRepository.deleteById(categoryId);
    }
}

================
File: src/main/java/com/spring/bookstore/service/CustomerService.java
================
package com.spring.bookstore.service;

import com.spring.bookstore.dto.CustomerProfileDto;
import com.spring.bookstore.entity.Customer;
import com.spring.bookstore.entity.RoleEnum;
import com.spring.bookstore.repository.CustomerRepository;
import com.spring.bookstore.repository.RoleRepository;
import jakarta.persistence.EntityNotFoundException;
import lombok.AllArgsConstructor;
import org.modelmapper.ModelMapper;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@AllArgsConstructor
public class CustomerService {

    private CustomerRepository customerRepository;
    private RoleRepository roleRepository;
    private PasswordEncoder passwordEncoder;
    private ModelMapper modelMapper;

    public CustomerProfileDto getCustomerById(int customerId) {
        Customer customer = this.customerRepository.findById(customerId)
                .orElseThrow(
                        () -> new EntityNotFoundException("The customer with id " + customerId + " not found!")
                );
        return this.modelMapper.map(customer, CustomerProfileDto.class);
    }

    public List<CustomerProfileDto> getAllCustomers() {
        List<Customer> customers = this.customerRepository.findAll();
        return customers.stream().map((customer) -> this.modelMapper.map(customer, CustomerProfileDto.class)).toList();
    }

    public CustomerProfileDto registerCustomer(Customer customer) {
        boolean check = this.customerRepository.existsByEmail(customer.getEmail());
        if(check) {
            throw new IllegalArgumentException("The email already exists!");
        }
        customer.setPassword(this.passwordEncoder.encode(customer.getPassword()));
        customer.setRole(this.roleRepository.findByName(RoleEnum.USER).get());

        return this.modelMapper.map(this.customerRepository.save(customer), CustomerProfileDto.class);
    }

    public CustomerProfileDto updateProfile(int userId, CustomerProfileDto customerProfileDto) {
        Customer customer = this.customerRepository.findById(userId).get();
        customer.setFullName(customerProfileDto.getFullName());
        customer.setPhone(customerProfileDto.getPhone());
        customer.setAddress(customerProfileDto.getAddress());
        return this.modelMapper.map(this.customerRepository.save(customer), CustomerProfileDto.class);
    }

    public CustomerProfileDto changePassword(int userId, String password) {
        Customer customer = this.customerRepository.findById(userId).orElseThrow(
                () -> new EntityNotFoundException("The customer with id " + userId + " not found!")
        );
        customer.setPassword(this.passwordEncoder.encode(password));
        return this.modelMapper.map(this.customerRepository.save(customer), CustomerProfileDto.class);
    }

    public void deleteCustomer(int customerId) {
        this.customerRepository.findById(customerId)
                .orElseThrow(
                        () -> new EntityNotFoundException("The customer with id " + customerId + " not found!")
                );
        this.customerRepository.deleteById(customerId);
    }
}

================
File: src/main/java/com/spring/bookstore/service/MailService.java
================
package com.spring.bookstore.service;

import io.github.cdimascio.dotenv.Dotenv;
import lombok.AllArgsConstructor;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

@Service
@AllArgsConstructor
public class MailService {

    private JavaMailSender javaMailSender;
    private Dotenv dotenv;

    public void sendMail(String to, String subject, String text) {
        SimpleMailMessage simpleMailMessage = new SimpleMailMessage();
        simpleMailMessage.setFrom(this.dotenv.get("spring.mail.username"));
        simpleMailMessage.setTo(to);
        simpleMailMessage.setSubject(subject);
        simpleMailMessage.setText(text);
        this.javaMailSender.send(simpleMailMessage);
    }
}

================
File: src/main/java/com/spring/bookstore/service/OrderService.java
================
package com.spring.bookstore.service;

import com.spring.bookstore.dto.CustomerProfileDto;
import com.spring.bookstore.dto.OrderRequestDto;
import com.spring.bookstore.entity.*;
import com.spring.bookstore.repository.BookRepository;
import com.spring.bookstore.repository.OrderRepository;
import jakarta.persistence.EntityNotFoundException;
import lombok.AllArgsConstructor;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
@AllArgsConstructor
public class OrderService {

    private OrderRepository orderRepository;
    private UserService userService;
    private CustomerService customerService;
    private CartService cartService;
    private BookRepository bookRepository;
    private ModelMapper modelMapper;

    public Order placeOrder(OrderRequestDto orderRequestDto) {
        int userId = this.userService.getUserId();
        CustomerProfileDto customerProfileDto = this.customerService.getCustomerById(userId);
        Customer customer = this.modelMapper.map(customerProfileDto, Customer.class);
        Map<Integer, Integer> items = this.cartService.getItems();

        Order order = new Order();
        order.setCustomer(customer);
        order.setShippingAddress(orderRequestDto.getShippingAddress());
        order.setRecipientName(orderRequestDto.getRecipientName());
        order.setRecipientPhone(orderRequestDto.getRecipientPhone());
        order.setPaymentMethod(orderRequestDto.getPaymentMethod());
        order.setShippingCost(orderRequestDto.getShippingCost());
        order.setBookCopies(this.cartService.getTotalQuantities());

        Set<OrderDetail> orderDetails = new HashSet<>();
        items.forEach((key, value) -> {
            Book book = this.bookRepository.findById(key).get();

            OrderDetail orderDetail = new OrderDetail();
            orderDetail.setOrders(order);
            orderDetail.setBook(book);
            orderDetail.setQuantity(value);
            orderDetail.setSubTotal(book.getPrice() * value);

            orderDetails.add(orderDetail);
        });

        order.setTotal(this.cartService.getTotalAmount());
        order.setStatus(OrderStatusEnum.PENDING);
        order.setOrderDetails(orderDetails);

        this.cartService.removeCart();

        return this.orderRepository.save(order);
    }

    public Order getOrderById(int orderId) {
        return this.orderRepository.findById(orderId).orElseThrow(
                () -> new EntityNotFoundException("Order with id " + orderId + " not found!")
        );
    }

    public List<Order> getAllOrders() {
        return this.orderRepository.findAll();
    }

    public void deleteOrder(int orderId) {
        this.orderRepository.findById(orderId).orElseThrow(
                () -> new EntityNotFoundException("Order with id " + orderId + " not found!")
        );
        this.orderRepository.deleteById(orderId);
    }

    public List<Order> getAllOrderByCustomer() {
        int userId = this.userService.getUserId();
        CustomerProfileDto customerProfileDto = this.customerService.getCustomerById(userId);
        Customer customer = this.modelMapper.map(customerProfileDto, Customer.class);
        return this.orderRepository.findAllByCustomer(customer);
    }

    public Order updateOrderStatus(int orderId, OrderStatusEnum status) {
        Order order = this.orderRepository.findById(orderId).orElseThrow(
                () -> new EntityNotFoundException("Order with id " + orderId + " not found!")
        );
        order.setStatus(status);
        return this.orderRepository.save(order);
    }
}

================
File: src/main/java/com/spring/bookstore/service/ReviewService.java
================
package com.spring.bookstore.service;

import com.spring.bookstore.dto.CustomerProfileDto;
import com.spring.bookstore.dto.ReviewRequestDto;
import com.spring.bookstore.entity.Book;
import com.spring.bookstore.entity.Customer;
import com.spring.bookstore.entity.Review;
import com.spring.bookstore.repository.ReviewRepository;
import jakarta.persistence.EntityNotFoundException;
import lombok.AllArgsConstructor;
import lombok.ToString;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@AllArgsConstructor
@ToString
public class ReviewService {

    private ReviewRepository reviewRepository;
    private UserService userService;
    private BookService bookService;
    private CustomerService customerService;
    private ModelMapper modelMapper;

    public Review getReviewById(int reviewId) {
        return this.reviewRepository.findById(reviewId)
                .orElseThrow(
                        () -> new EntityNotFoundException("Review with id " + reviewId + " not found!")
                );
    }

    public List<Review> getAllReviews() {
        return this.reviewRepository.findAll();
    }

    public Review addReview(ReviewRequestDto review) {
        int userId = this.userService.getUserId();
        CustomerProfileDto customerProfileDto = this.customerService.getCustomerById(userId);
        Customer customer = this.modelMapper.map(customerProfileDto, Customer.class);
        Book book = this.bookService.getBookById(review.getBook().getBookId());
        Review newReview = new Review();
        newReview.setBook(book);
        newReview.setCustomer(customer);
        newReview.setComment(review.getComment());
        return this.reviewRepository.save(newReview);
    }

    public Review updateReview(int reviewId, ReviewRequestDto review) {
        Review existedReview = this.reviewRepository.findById(reviewId)
                .orElseThrow(
                        () -> new EntityNotFoundException("Review with id " + reviewId + " not found!")
                );
        existedReview.setComment(review.getComment());
        return this.reviewRepository.save(existedReview);
    }

    public void deleteReview(int reviewId) {
        this.reviewRepository.findById(reviewId)
                .orElseThrow(
                        () -> new EntityNotFoundException("Review with id " + reviewId + " not found!")
                );
        this.reviewRepository.deleteById(reviewId);
    }
}

================
File: src/main/java/com/spring/bookstore/service/UserService.java
================
package com.spring.bookstore.service;

import com.spring.bookstore.dto.ResetPasswordDto;
import com.spring.bookstore.entity.PasswordResetToken;
import com.spring.bookstore.entity.Users;
import com.spring.bookstore.entity.VerificationToken;
import com.spring.bookstore.repository.PasswordResetTokenRepository;
import com.spring.bookstore.repository.UserRepository;
import com.spring.bookstore.repository.VerificationTokenRepository;
import jakarta.persistence.EntityNotFoundException;
import lombok.AllArgsConstructor;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.UUID;

@Service
@AllArgsConstructor
public class UserService {

    private UserRepository userRepository;
    private VerificationTokenRepository verificationTokenRepository;
    private PasswordResetTokenRepository passwordResetTokenRepository;
    private PasswordEncoder passwordEncoder;
    private MailService mailService;

    public UserDetails getUserDetails() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        return (UserDetails) authentication.getPrincipal();
    }

    public int getUserId()  {
        UserDetails userDetails = this.getUserDetails();
        return userDetails != null ? this.userRepository.findByEmail(userDetails.getUsername()).get().getUserId() : 0;
    }

    public VerificationToken getVerificationTokenByToken(String token) {
        return this.verificationTokenRepository.findByToken(token).orElseThrow(
                EntityNotFoundException::new
        );
    }

    public VerificationToken saveVerificationToken(Users users, String token) {
        VerificationToken verificationToken = new VerificationToken();
        verificationToken.setUsers(users);
        verificationToken.setToken(token);
        verificationToken.setExpiryDate(LocalDateTime.now().plusHours(24));
        return this.verificationTokenRepository.save(verificationToken);
    }

    public void resetPassword(String email) {
        Users users = this.userRepository.findByEmail(email)
                .orElseThrow(() -> new EntityNotFoundException("The user with email " + email + " does not exist!"));
        PasswordResetToken passwordResetToken = this.createPasswordResetToken(users);

        String token = passwordResetToken.getToken();
        String message = "Please click the link to reset your password http://localhost:8080/auth/change-password?token=" + token;
        String to = users.getEmail();
        String subject = "Reset Password";

        this.mailService.sendMail(to, subject, message);
    }

    public PasswordResetToken createPasswordResetToken(Users users) {
        String token = UUID.randomUUID().toString();
        PasswordResetToken passwordResetToken = new PasswordResetToken();
        passwordResetToken.setToken(token);
        passwordResetToken.setUsers(users);
        passwordResetToken.setExpiredDate(LocalDateTime.now().plusHours(24));
        return this.passwordResetTokenRepository.save(passwordResetToken);
    }

    public String validatePasswordResetToken(String token) {
        PasswordResetToken passwordResetToken = this.passwordResetTokenRepository.findByToken(token).orElse(null);
        if (passwordResetToken == null) return null;
        if (passwordResetToken.getExpiredDate().isBefore(LocalDateTime.now())) return "Expired";
        return "ValidToken";
    }

    public Users savePassword(ResetPasswordDto resetPasswordDto) {
        String email = resetPasswordDto.getEmail();
        Users users = this.userRepository.findByEmail(email)
                .orElseThrow(() -> new EntityNotFoundException("User with email " + email + " does not exist!"));
        users.setPassword(this.passwordEncoder.encode(resetPasswordDto.getPassword()));
        return this.userRepository.save(users);
    }
}

================
File: src/main/java/com/spring/bookstore/utils/CartItem.java
================
package com.spring.bookstore.utils;

import java.util.LinkedHashMap;
import java.util.Map;

public class CartItem {

    private final Map<Integer, Integer> cart = new LinkedHashMap<>();

    public void addToCart(int bookId) {
        this.cart.put(bookId, this.cart.getOrDefault(bookId, 0) + 1);
    }

    public void clearCart() {
        this.cart.clear();
    }

    public void removeItem(int bookId) {
        this.cart.remove(bookId);
    }

    public void minusItem(int bookId) {
        if(this.cart.get(bookId) > 1) this.cart.put(bookId, this.cart.get(bookId) - 1);
        else this.cart.remove(bookId);
    }

    public int totalItems() {
        return this.cart.size();
    }

    public int totalQuantities() {
        return this.cart.values().stream().mapToInt(Integer::intValue).sum();
    }

    public Map<Integer, Integer> getCart() {
        return this.cart;
    }

}

================
File: src/main/resources/application.properties
================
spring.application.name=Book-Store-Web

spring.datasource.url=jdbc:mysql://localhost:3306/bookstore?allowPublicKeyRetrieval=true&useSSL=false
spring.datasource.username=root
spring.datasource.password=123456

logging.level.org.springframework.security=debug

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.open-in-view=true
admin.email=hieucao135kk@gmail.com

spring.data.redis.host=127.0.0.1
spring.data.redis.port=6379

================
File: src/test/java/com/spring/bookstore/BookStoreWebApplicationTests.java
================
package com.spring.bookstore;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class BookStoreWebApplicationTests {

	@Test
	void contextLoads() {
	}

}

================
File: src/test/java/com/spring/bookstore/MainTest.java
================
package com.spring.bookstore;

import com.cloudinary.Cloudinary;
import com.cloudinary.utils.ObjectUtils;
import io.github.cdimascio.dotenv.Dotenv;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import java.io.Console;
import java.io.IOException;
import java.util.Map;

public class MainTest {

    public static void testPasswordEncoder() {
        PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
        String pass = "123456";
        System.out.println(passwordEncoder.encode(pass));
    }

    public static void main(String[] args) throws Exception {
//        Dotenv dotenv = Dotenv.load();
//        Cloudinary cloudinary = new Cloudinary(dotenv.get("CLOUDINARY_URL"));
//        cloudinary.config.secure = true;
//        System.out.println(cloudinary.config.cloudName);
//
//        Map params1 = ObjectUtils.asMap(
//                "use_filename", true,
//                "unique_filename", false,
//                "overwrite", true
//        );
//
//        System.out.println(
//                cloudinary.uploader().upload("https://cloudinary-devs.github.io/cld-docs-assets/assets/images/coffee_cup.jpg", params1));
//
//        // Get the asset details
//        Map params2 = ObjectUtils.asMap(
//                "quality_analysis", true
//        );
//
//        System.out.println(
//                cloudinary.api().resource("coffee_cup", params2));
//        testPasswordEncoder();
        int num = 10;
        Integer x = num;
        System.out.println();
    }
}
